name: Docker - build, test, push

# This workflow will built docker image and run tests inside the container.
# This workflow is only executed if there is pull request with change in pyproject.toml dependencies, 
# or in Dockerfile, or in docker workflow. 

on:
  pull_request:
    paths:
      - '.github/workflows/docker-image.yml'
      - 'pyproject.toml'
      - 'Dockerfile'
      
  # allows to manually start a workflow run from the GitHub UI or using the GitHub API.    
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # We do not bother with setup-qemu-action since we don't care about emulation right now
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: aiod/metadata_catalogue:latest
          outputs: type=docker,dest=/tmp/aiod_mc_image.tar
      # We store the image as an artifact so it can be used by the `test` step,
      # and inspected manually if needed (download it through Github Actions UI)
      - name: Store Image
        uses: actions/upload-artifact@v4
        with:
          name: aiod_mc_image
          path: /tmp/aiod_mc_image.tar

  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      # We need to check out the repository, so that we have the `scripts` directory to mount.
      - uses: actions/checkout@v4
      - name: Retrieve Image
        uses: actions/download-artifact@v4
        with:
          name: aiod_mc_image
          path: /tmp
      - name: Load Image
        run: |
          docker load --input /tmp/aiod_mc_image.tar
          docker image ls -a
      - name: Run pytest from docker
        run: |
          docker run -v ./scripts:/scripts -e KEYCLOAK_CLIENT_SECRET="mocked_secret" --entrypoint "" aiod/metadata_catalogue sh -c "pip install \".[dev]\" && pytest tests -s"

  publish:
    # TODO: Make conditional on being a release or manual action
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # My hope is that by retrieving the image, it can use the cache.
      # But I fear that cache needs to be archived/restored separately.
      # I want to avoid re-building the docker image, but I do not see
      # an option for that in build-push-action. Perhaps it should just
      # be a shell `docker push` command instead.
      - name: Retrieve Image
        uses: actions/download-artifact@v4
        with:
          name: aiod_mc_image
          path: /tmp
      - name: Load Image
        run: |
          docker load --input /tmp/aiod_mc_image.tar
          docker image ls -a
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.AIOD_DOCKER_PAT }}
      - name: Build
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: ./Dockerfile
          tags: |
            aiod/metadata_catalogue:latest
            aiod/metadata_catalogue:${{ github.sha }}
      # peter-evans/dockerhub-description@v3
