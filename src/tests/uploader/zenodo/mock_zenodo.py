class MockZenodoResponse:
    def __init__(self, repo_id: int, base_url: str, repo_url: str) -> None:
        self.id = repo_id
        self.base_url = base_url
        self.bucket_url = repo_url

    def create_repo(self, metadata: dict) -> dict:
        """
        Truncated response to a POST request to the base_url
        """
        response = {"id": self.id, "links": {"bucket": self.bucket_url}, "files": []}
        for k, v in metadata.items():
            response[k] = v
        return response

    def get_metadata(self, existing_files: list[str] = []) -> dict:
        """
        Truncated response to a GET request to the base_url/repo_id.
        The parameter `existing_files` represent a list of names of files already
        existing in this zenodo repo.
        """
        files = [self.generate_file_metadata(filename) for filename in existing_files]
        response = {"id": self.id, "links": {"bucket": self.bucket_url}, "files": files}
        return response

    def add_metadata(self, existing_files: list[str] = []) -> dict:
        """
        Truncated response to a PUT request to the repo_url/filename.
        The parameter `existing_files` represent a list of names of files already
        existing in this zenodo repo.
        """
        files = [self.generate_file_metadata(filename) for filename in existing_files]
        response = {"id": self.id, "links": {"bucket": self.bucket_url}, "files": files}
        return response

    def add_file(self) -> dict:
        """
        Truncated response to a PUT request to the base_url/repo_id.
        """
        return {}

    def generate_file_metadata(self, filename: str) -> dict:
        # The id generated by zenodo doesn't have the filename in it.
        # But I'm using it here to keep the id unique in case of testing multiple uploads
        id_ = f"1234-{filename}"
        metadata = {
            "id": id_,
            "filename": filename,
            "filesize": 20,
            "checksum": "12345abcd",
            "links": {
                "self": f"{self.base_url}/{self.id}/files/{id_}",
                "download": f"https://zenodo.org/api/records/{self.id}/draft/files/"
                f"{filename}/content",
            },
        }
        return metadata
